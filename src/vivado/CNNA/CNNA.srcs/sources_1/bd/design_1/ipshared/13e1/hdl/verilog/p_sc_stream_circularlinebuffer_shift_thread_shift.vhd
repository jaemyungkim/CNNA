-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_sc_stream_circularlinebuffer_shift_thread_shift is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    din_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    din_0_empty_n : IN STD_LOGIC;
    din_0_read : OUT STD_LOGIC;
    din_1_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    din_1_empty_n : IN STD_LOGIC;
    din_1_read : OUT STD_LOGIC;
    din_2_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    din_2_empty_n : IN STD_LOGIC;
    din_2_read : OUT STD_LOGIC;
    din_3_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    din_3_empty_n : IN STD_LOGIC;
    din_3_read : OUT STD_LOGIC;
    din_4_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    din_4_empty_n : IN STD_LOGIC;
    din_4_read : OUT STD_LOGIC;
    din_5_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    din_5_empty_n : IN STD_LOGIC;
    din_5_read : OUT STD_LOGIC;
    din_6_dout : IN STD_LOGIC;
    din_6_empty_n : IN STD_LOGIC;
    din_6_read : OUT STD_LOGIC;
    din_7_dout : IN STD_LOGIC;
    din_7_empty_n : IN STD_LOGIC;
    din_7_read : OUT STD_LOGIC;
    din_8_dout : IN STD_LOGIC;
    din_8_empty_n : IN STD_LOGIC;
    din_8_read : OUT STD_LOGIC;
    dout_0_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_0_full_n : IN STD_LOGIC;
    dout_0_write : OUT STD_LOGIC;
    dout_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_1_full_n : IN STD_LOGIC;
    dout_1_write : OUT STD_LOGIC;
    dout_2_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_2_full_n : IN STD_LOGIC;
    dout_2_write : OUT STD_LOGIC );
end;


architecture behav of p_sc_stream_circularlinebuffer_shift_thread_shift is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv384_lc_1 : STD_LOGIC_VECTOR (383 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001011111111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_300 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001100000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";

    signal din_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal din_1_blk_n : STD_LOGIC;
    signal din_2_blk_n : STD_LOGIC;
    signal din_3_blk_n : STD_LOGIC;
    signal din_4_blk_n : STD_LOGIC;
    signal din_5_blk_n : STD_LOGIC;
    signal din_6_blk_n : STD_LOGIC;
    signal din_7_blk_n : STD_LOGIC;
    signal din_8_blk_n : STD_LOGIC;
    signal dout_0_blk_n : STD_LOGIC;
    signal val_EOP_fu_303_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln81_reg_815 : STD_LOGIC_VECTOR (0 downto 0);
    signal dout_1_blk_n : STD_LOGIC;
    signal dout_2_blk_n : STD_LOGIC;
    signal i_assign_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_window_size_pkg_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal io_acc_block_signal_op39 : STD_LOGIC;
    signal io_acc_block_signal_op72 : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal val_window_size_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_replay_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_skip_fu_299_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_skip_reg_762 : STD_LOGIC_VECTOR (0 downto 0);
    signal val_EOP_reg_766 : STD_LOGIC_VECTOR (0 downto 0);
    signal sr_0_ptr_write_fu_324_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sr_0_ptr_write_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal sr_1_ptr_write_fu_349_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sr_1_ptr_write_reg_777 : STD_LOGIC_VECTOR (31 downto 0);
    signal sr_2_ptr_write_fu_374_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sr_2_ptr_write_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_fu_382_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln69_reg_791 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln69_1_fu_386_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln69_1_reg_796 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln69_2_fu_390_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln69_2_reg_801 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln78_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_re_fu_399_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_re_reg_810 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln81_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal io_acc_block_signal_op143 : STD_LOGIC;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_410_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln279_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln279_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln279_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln279_1_reg_859 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln279_2_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln279_2_reg_879 : STD_LOGIC_VECTOR (0 downto 0);
    signal raw_out_tlast_V_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal raw_out_tlast_V_reg_899 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal sr_0_regs_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sr_0_regs_V_ce0 : STD_LOGIC;
    signal sr_0_regs_V_we0 : STD_LOGIC;
    signal sr_0_regs_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal sr_1_regs_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sr_1_regs_V_ce0 : STD_LOGIC;
    signal sr_1_regs_V_we0 : STD_LOGIC;
    signal sr_1_regs_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal sr_2_regs_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal sr_2_regs_V_ce0 : STD_LOGIC;
    signal sr_2_regs_V_we0 : STD_LOGIC;
    signal sr_2_regs_V_q0 : STD_LOGIC_VECTOR (127 downto 0);
    signal sr_ptr_write_2_0_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sr_ptr_write_1_0_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal sr_ptr_write_0_0_reg_239 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_re_0_reg_250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sext_ln63_fu_307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_1_fu_332_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln63_2_fu_357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_1_fu_567_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_2_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_data_V_fu_680_p4 : STD_LOGIC_VECTOR (383 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_tkeep_V_fu_691_p49 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln64_fu_312_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_1_fu_337_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln64_2_fu_362_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln64_2_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln69_fu_416_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln69_fu_427_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln69_3_fu_433_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln69_fu_439_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_3_fu_447_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln69_fu_451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_461_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln70_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_fu_456_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln70_fu_487_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln69_1_fu_500_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_1_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_1_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_4_fu_519_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln69_1_fu_523_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_62_fu_533_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_1_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln70_1_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_1_fu_528_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln70_1_fu_559_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln69_2_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln69_2_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln69_2_fu_583_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln69_5_fu_591_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln69_2_fu_595_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_63_fu_605_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_2_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln70_2_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln70_2_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln70_2_fu_600_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln70_2_fu_631_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_64_fu_649_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln94_fu_669_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component p_sc_stream_circularlinebuffer_shift_thread_shift_sr_0_regs_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (127 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    sr_0_regs_V_U : component p_sc_stream_circularlinebuffer_shift_thread_shift_sr_0_regs_V
    generic map (
        DataWidth => 128,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sr_0_regs_V_address0,
        ce0 => sr_0_regs_V_ce0,
        we0 => sr_0_regs_V_we0,
        d0 => din_0_dout,
        q0 => sr_0_regs_V_q0);

    sr_1_regs_V_U : component p_sc_stream_circularlinebuffer_shift_thread_shift_sr_0_regs_V
    generic map (
        DataWidth => 128,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sr_1_regs_V_address0,
        ce0 => sr_1_regs_V_ce0,
        we0 => sr_1_regs_V_we0,
        d0 => din_1_dout,
        q0 => sr_1_regs_V_q0);

    sr_2_regs_V_U : component p_sc_stream_circularlinebuffer_shift_thread_shift_sr_0_regs_V
    generic map (
        DataWidth => 128,
        AddressRange => 768,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sr_2_regs_V_address0,
        ce0 => sr_2_regs_V_ce0,
        we0 => sr_2_regs_V_we0,
        d0 => din_2_dout,
        q0 => sr_2_regs_V_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln78_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (val_EOP_reg_766 = ap_const_lv1_0) and (val_skip_reg_762 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln78_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (val_EOP_reg_766 = ap_const_lv1_0) and (val_skip_reg_762 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_assign_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln78_fu_394_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3) and (val_EOP_reg_766 = ap_const_lv1_0) and (val_skip_reg_762 = ap_const_lv1_0))) then 
                i_assign_reg_261 <= ap_const_lv32_0;
            elsif (((icmp_ln81_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_assign_reg_261 <= i_fu_410_p2;
            end if; 
        end if;
    end process;

    i_re_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_re_0_reg_250 <= i_re_reg_810;
            elsif ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (val_skip_fu_299_p1 = ap_const_lv1_0))) then 
                i_re_0_reg_250 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sr_ptr_write_0_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((val_EOP_reg_766 = ap_const_lv1_1) or ((val_skip_reg_762 = ap_const_lv1_1) or (icmp_ln78_fu_394_p2 = ap_const_lv1_0))))) then 
                sr_ptr_write_0_0_reg_239 <= sr_0_ptr_write_reg_770;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                sr_ptr_write_0_0_reg_239 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sr_ptr_write_1_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((val_EOP_reg_766 = ap_const_lv1_1) or ((val_skip_reg_762 = ap_const_lv1_1) or (icmp_ln78_fu_394_p2 = ap_const_lv1_0))))) then 
                sr_ptr_write_1_0_reg_228 <= sr_1_ptr_write_reg_777;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                sr_ptr_write_1_0_reg_228 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sr_ptr_write_2_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((val_EOP_reg_766 = ap_const_lv1_1) or ((val_skip_reg_762 = ap_const_lv1_1) or (icmp_ln78_fu_394_p2 = ap_const_lv1_0))))) then 
                sr_ptr_write_2_0_reg_217 <= sr_2_ptr_write_reg_784;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                sr_ptr_write_2_0_reg_217 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (val_EOP_reg_766 = ap_const_lv1_0) and (val_skip_reg_762 = ap_const_lv1_0))) then
                i_re_reg_810 <= i_re_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln81_fu_405_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln279_1_reg_859 <= icmp_ln279_1_fu_658_p2;
                icmp_ln279_2_reg_879 <= icmp_ln279_2_fu_664_p2;
                icmp_ln279_reg_839 <= icmp_ln279_fu_644_p2;
                raw_out_tlast_V_reg_899 <= raw_out_tlast_V_fu_674_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln81_reg_815 <= icmp_ln81_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                sr_0_ptr_write_reg_770 <= sr_0_ptr_write_fu_324_p3;
                sr_1_ptr_write_reg_777 <= sr_1_ptr_write_fu_349_p3;
                sr_2_ptr_write_reg_784 <= sr_2_ptr_write_fu_374_p3;
                val_EOP_reg_766 <= (0=>din_8_dout, others=>'-');
                val_replay_reg_757 <= din_5_dout;
                val_skip_reg_762 <= (0=>din_6_dout, others=>'-');
                val_window_size_pkg_reg_744 <= din_3_dout;
                val_window_size_reg_750 <= din_4_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2) and (val_skip_fu_299_p1 = ap_const_lv1_0))) then
                trunc_ln69_1_reg_796 <= trunc_ln69_1_fu_386_p1;
                trunc_ln69_2_reg_801 <= trunc_ln69_2_fu_390_p1;
                trunc_ln69_reg_791 <= trunc_ln69_fu_382_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72, val_skip_reg_762, val_EOP_reg_766, icmp_ln78_fu_394_p2, ap_CS_fsm_state3, icmp_ln81_fu_405_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((val_EOP_reg_766 = ap_const_lv1_1) or ((val_skip_reg_762 = ap_const_lv1_1) or (icmp_ln78_fu_394_p2 = ap_const_lv1_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln81_fu_405_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln81_fu_405_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln64_1_fu_337_p2 <= std_logic_vector(signed(sr_ptr_write_1_0_reg_228) + signed(ap_const_lv32_1));
    add_ln64_2_fu_362_p2 <= std_logic_vector(signed(sr_ptr_write_2_0_reg_217) + signed(ap_const_lv32_1));
    add_ln64_fu_312_p2 <= std_logic_vector(signed(sr_ptr_write_0_0_reg_239) + signed(ap_const_lv32_1));
    add_ln69_1_fu_523_p2 <= std_logic_vector(unsigned(sr_1_ptr_write_reg_777) + unsigned(select_ln69_1_fu_511_p3));
    add_ln69_2_fu_595_p2 <= std_logic_vector(unsigned(sr_2_ptr_write_reg_784) + unsigned(select_ln69_2_fu_583_p3));
    add_ln69_fu_451_p2 <= std_logic_vector(unsigned(sr_0_ptr_write_reg_770) + unsigned(select_ln69_fu_439_p3));
    add_ln70_1_fu_528_p2 <= std_logic_vector(unsigned(trunc_ln69_4_fu_519_p1) + unsigned(trunc_ln69_1_reg_796));
    add_ln70_2_fu_600_p2 <= std_logic_vector(unsigned(trunc_ln69_5_fu_591_p1) + unsigned(trunc_ln69_2_reg_801));
    add_ln70_fu_456_p2 <= std_logic_vector(unsigned(trunc_ln69_3_fu_447_p1) + unsigned(trunc_ln69_reg_791));
    add_ln94_fu_669_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFFF) + signed(val_window_size_pkg_reg_744));
    and_ln70_1_fu_553_p2 <= (xor_ln70_1_fu_541_p2 and icmp_ln70_1_fu_547_p2);
    and_ln70_2_fu_625_p2 <= (xor_ln70_2_fu_613_p2 and icmp_ln70_2_fu_619_p2);
    and_ln70_fu_481_p2 <= (xor_ln70_fu_469_p2 and icmp_ln70_fu_475_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op143)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln81_reg_815 = ap_const_lv1_1) and (io_acc_block_signal_op143 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op143)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln81_reg_815 = ap_const_lv1_1) and (io_acc_block_signal_op143 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op143)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln81_reg_815 = ap_const_lv1_1) and (io_acc_block_signal_op143 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
                ap_block_state2 <= ((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter1_assign_proc : process(icmp_ln81_reg_815, io_acc_block_signal_op143)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((icmp_ln81_reg_815 = ap_const_lv1_1) and (io_acc_block_signal_op143 = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln81_fu_405_p2)
    begin
        if ((icmp_ln81_fu_405_p2 = ap_const_lv1_0)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    din_0_blk_n_assign_proc : process(din_0_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_0_blk_n <= din_0_empty_n;
        else 
            din_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_0_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_0_read <= ap_const_logic_1;
        else 
            din_0_read <= ap_const_logic_0;
        end if; 
    end process;


    din_1_blk_n_assign_proc : process(din_1_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_1_blk_n <= din_1_empty_n;
        else 
            din_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_1_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_1_read <= ap_const_logic_1;
        else 
            din_1_read <= ap_const_logic_0;
        end if; 
    end process;


    din_2_blk_n_assign_proc : process(din_2_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_2_blk_n <= din_2_empty_n;
        else 
            din_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_2_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_2_read <= ap_const_logic_1;
        else 
            din_2_read <= ap_const_logic_0;
        end if; 
    end process;


    din_3_blk_n_assign_proc : process(din_3_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_3_blk_n <= din_3_empty_n;
        else 
            din_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_3_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_3_read <= ap_const_logic_1;
        else 
            din_3_read <= ap_const_logic_0;
        end if; 
    end process;


    din_4_blk_n_assign_proc : process(din_4_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_4_blk_n <= din_4_empty_n;
        else 
            din_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_4_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_4_read <= ap_const_logic_1;
        else 
            din_4_read <= ap_const_logic_0;
        end if; 
    end process;


    din_5_blk_n_assign_proc : process(din_5_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_5_blk_n <= din_5_empty_n;
        else 
            din_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_5_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_5_read <= ap_const_logic_1;
        else 
            din_5_read <= ap_const_logic_0;
        end if; 
    end process;


    din_6_blk_n_assign_proc : process(din_6_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_6_blk_n <= din_6_empty_n;
        else 
            din_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_6_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_6_read <= ap_const_logic_1;
        else 
            din_6_read <= ap_const_logic_0;
        end if; 
    end process;


    din_7_blk_n_assign_proc : process(din_7_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_7_blk_n <= din_7_empty_n;
        else 
            din_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_7_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_7_read <= ap_const_logic_1;
        else 
            din_7_read <= ap_const_logic_0;
        end if; 
    end process;


    din_8_blk_n_assign_proc : process(din_8_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_8_blk_n <= din_8_empty_n;
        else 
            din_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_8_read_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_8_read <= ap_const_logic_1;
        else 
            din_8_read <= ap_const_logic_0;
        end if; 
    end process;


    dout_0_blk_n_assign_proc : process(dout_0_full_n, ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln81_reg_815)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dout_0_blk_n <= dout_0_full_n;
        else 
            dout_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dout_0_din_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op39, io_acc_block_signal_op72, tmp_data_V_fu_680_p4, ap_block_pp0_stage0_01001)
    begin
        if (((icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_0_din <= tmp_data_V_fu_680_p4;
        elsif ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_0_din <= ap_const_lv384_lc_1;
        else 
            dout_0_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dout_0_write_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dout_0_write <= ap_const_logic_1;
        else 
            dout_0_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_1_blk_n_assign_proc : process(dout_1_full_n, ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln81_reg_815)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dout_1_blk_n <= dout_1_full_n;
        else 
            dout_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dout_1_din_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op39, io_acc_block_signal_op72, raw_out_tlast_V_reg_899, ap_block_pp0_stage0_01001)
    begin
        if (((icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_1_din <= raw_out_tlast_V_reg_899;
        elsif ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_1_din <= ap_const_lv1_1;
        else 
            dout_1_din <= "X";
        end if; 
    end process;


    dout_1_write_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dout_1_write <= ap_const_logic_1;
        else 
            dout_1_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_2_blk_n_assign_proc : process(dout_2_full_n, ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln81_reg_815)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dout_2_blk_n <= dout_2_full_n;
        else 
            dout_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dout_2_din_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_01001, tmp_tkeep_V_fu_691_p49)
    begin
        if (((icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dout_2_din <= tmp_tkeep_V_fu_691_p49;
        elsif ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_2_din <= ap_const_lv48_0;
        else 
            dout_2_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dout_2_write_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln81_reg_815, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln81_reg_815 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (val_EOP_fu_303_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            dout_2_write <= ap_const_logic_1;
        else 
            dout_2_write <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_410_p2 <= std_logic_vector(unsigned(i_assign_reg_261) + unsigned(ap_const_lv32_1));
    i_re_fu_399_p2 <= std_logic_vector(unsigned(i_re_0_reg_250) + unsigned(ap_const_lv32_1));
    icmp_ln279_1_fu_658_p2 <= "1" when (signed(tmp_64_fu_649_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln279_2_fu_664_p2 <= "1" when (signed(val_window_size_reg_750) > signed(ap_const_lv32_2)) else "0";
    icmp_ln279_fu_644_p2 <= "1" when (signed(val_window_size_reg_750) > signed(ap_const_lv32_0)) else "0";
    icmp_ln64_1_fu_343_p2 <= "1" when (signed(add_ln64_1_fu_337_p2) > signed(ap_const_lv32_2FF)) else "0";
    icmp_ln64_2_fu_368_p2 <= "1" when (signed(add_ln64_2_fu_362_p2) > signed(ap_const_lv32_2FF)) else "0";
    icmp_ln64_fu_318_p2 <= "1" when (signed(add_ln64_fu_312_p2) > signed(ap_const_lv32_2FF)) else "0";
    icmp_ln69_1_fu_505_p2 <= "1" when (signed(sub_ln69_1_fu_500_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln69_2_fu_577_p2 <= "1" when (signed(sub_ln69_2_fu_572_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln69_fu_421_p2 <= "1" when (signed(sub_ln69_fu_416_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln70_1_fu_547_p2 <= "1" when (signed(add_ln69_1_fu_523_p2) < signed(ap_const_lv32_300)) else "0";
    icmp_ln70_2_fu_619_p2 <= "1" when (signed(add_ln69_2_fu_595_p2) < signed(ap_const_lv32_300)) else "0";
    icmp_ln70_fu_475_p2 <= "1" when (signed(add_ln69_fu_451_p2) < signed(ap_const_lv32_300)) else "0";
    icmp_ln78_fu_394_p2 <= "1" when (signed(i_re_0_reg_250) < signed(val_replay_reg_757)) else "0";
    icmp_ln81_fu_405_p2 <= "1" when (signed(i_assign_reg_261) < signed(val_window_size_pkg_reg_744)) else "0";
    io_acc_block_signal_op143 <= (dout_2_full_n and dout_1_full_n and dout_0_full_n);
    io_acc_block_signal_op39 <= (din_8_empty_n and din_7_empty_n and din_6_empty_n and din_5_empty_n and din_4_empty_n and din_3_empty_n and din_2_empty_n and din_1_empty_n and din_0_empty_n);
    io_acc_block_signal_op72 <= (dout_2_full_n and dout_1_full_n and dout_0_full_n);
    raw_out_tlast_V_fu_674_p2 <= "1" when (i_assign_reg_261 = add_ln94_fu_669_p2) else "0";
    select_ln69_1_fu_511_p3 <= 
        xor_ln69_fu_427_p2 when (icmp_ln69_1_fu_505_p2(0) = '1') else 
        sub_ln69_3_fu_433_p2;
    select_ln69_2_fu_583_p3 <= 
        xor_ln69_fu_427_p2 when (icmp_ln69_2_fu_577_p2(0) = '1') else 
        sub_ln69_3_fu_433_p2;
    select_ln69_fu_439_p3 <= 
        xor_ln69_fu_427_p2 when (icmp_ln69_fu_421_p2(0) = '1') else 
        sub_ln69_3_fu_433_p2;
    select_ln70_1_fu_559_p3 <= 
        add_ln70_1_fu_528_p2 when (and_ln70_1_fu_553_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln70_2_fu_631_p3 <= 
        add_ln70_2_fu_600_p2 when (and_ln70_2_fu_625_p2(0) = '1') else 
        ap_const_lv10_0;
    select_ln70_fu_487_p3 <= 
        add_ln70_fu_456_p2 when (and_ln70_fu_481_p2(0) = '1') else 
        ap_const_lv10_0;
        sext_ln63_1_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sr_ptr_write_1_0_reg_228),64));

        sext_ln63_2_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sr_ptr_write_2_0_reg_217),64));

        sext_ln63_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sr_ptr_write_0_0_reg_239),64));

    sr_0_ptr_write_fu_324_p3 <= 
        ap_const_lv32_0 when (icmp_ln64_fu_318_p2(0) = '1') else 
        add_ln64_fu_312_p2;

    sr_0_regs_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, sext_ln63_fu_307_p1, zext_ln71_fu_495_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sr_0_regs_V_address0 <= zext_ln71_fu_495_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sr_0_regs_V_address0 <= sext_ln63_fu_307_p1(10 - 1 downto 0);
        else 
            sr_0_regs_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sr_0_regs_V_ce0_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sr_0_regs_V_ce0 <= ap_const_logic_1;
        else 
            sr_0_regs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sr_0_regs_V_we0_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sr_0_regs_V_we0 <= ap_const_logic_1;
        else 
            sr_0_regs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sr_1_ptr_write_fu_349_p3 <= 
        ap_const_lv32_0 when (icmp_ln64_1_fu_343_p2(0) = '1') else 
        add_ln64_1_fu_337_p2;

    sr_1_regs_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, sext_ln63_1_fu_332_p1, zext_ln71_1_fu_567_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sr_1_regs_V_address0 <= zext_ln71_1_fu_567_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sr_1_regs_V_address0 <= sext_ln63_1_fu_332_p1(10 - 1 downto 0);
        else 
            sr_1_regs_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sr_1_regs_V_ce0_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sr_1_regs_V_ce0 <= ap_const_logic_1;
        else 
            sr_1_regs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sr_1_regs_V_we0_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sr_1_regs_V_we0 <= ap_const_logic_1;
        else 
            sr_1_regs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sr_2_ptr_write_fu_374_p3 <= 
        ap_const_lv32_0 when (icmp_ln64_2_fu_368_p2(0) = '1') else 
        add_ln64_2_fu_362_p2;

    sr_2_regs_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, sext_ln63_2_fu_357_p1, zext_ln71_2_fu_639_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            sr_2_regs_V_address0 <= zext_ln71_2_fu_639_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sr_2_regs_V_address0 <= sext_ln63_2_fu_357_p1(10 - 1 downto 0);
        else 
            sr_2_regs_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    sr_2_regs_V_ce0_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, ap_CS_fsm_pp0_stage0, io_acc_block_signal_op39, io_acc_block_signal_op72, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or (not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            sr_2_regs_V_ce0 <= ap_const_logic_1;
        else 
            sr_2_regs_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sr_2_regs_V_we0_assign_proc : process(ap_CS_fsm_state2, val_EOP_fu_303_p1, io_acc_block_signal_op39, io_acc_block_signal_op72)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or ((val_EOP_fu_303_p1 = ap_const_lv1_1) and (io_acc_block_signal_op72 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            sr_2_regs_V_we0 <= ap_const_logic_1;
        else 
            sr_2_regs_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln69_1_fu_500_p2 <= std_logic_vector(unsigned(sr_1_ptr_write_reg_777) - unsigned(i_assign_reg_261));
    sub_ln69_2_fu_572_p2 <= std_logic_vector(unsigned(sr_2_ptr_write_reg_784) - unsigned(i_assign_reg_261));
    sub_ln69_3_fu_433_p2 <= std_logic_vector(unsigned(ap_const_lv32_2FF) - unsigned(i_assign_reg_261));
    sub_ln69_fu_416_p2 <= std_logic_vector(unsigned(sr_0_ptr_write_reg_770) - unsigned(i_assign_reg_261));
    tmp_61_fu_461_p3 <= add_ln69_fu_451_p2(31 downto 31);
    tmp_62_fu_533_p3 <= add_ln69_1_fu_523_p2(31 downto 31);
    tmp_63_fu_605_p3 <= add_ln69_2_fu_595_p2(31 downto 31);
    tmp_64_fu_649_p4 <= val_window_size_reg_750(31 downto 1);
    tmp_data_V_fu_680_p4 <= ((sr_2_regs_V_q0 & sr_1_regs_V_q0) & sr_0_regs_V_q0);
    tmp_tkeep_V_fu_691_p49 <= (((((((((((((((((((((((((((((((((((((((((((((((icmp_ln279_reg_839 & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_reg_839) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_1_reg_859) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879) & icmp_ln279_2_reg_879);
    trunc_ln69_1_fu_386_p1 <= sr_1_ptr_write_fu_349_p3(10 - 1 downto 0);
    trunc_ln69_2_fu_390_p1 <= sr_2_ptr_write_fu_374_p3(10 - 1 downto 0);
    trunc_ln69_3_fu_447_p1 <= select_ln69_fu_439_p3(10 - 1 downto 0);
    trunc_ln69_4_fu_519_p1 <= select_ln69_1_fu_511_p3(10 - 1 downto 0);
    trunc_ln69_5_fu_591_p1 <= select_ln69_2_fu_583_p3(10 - 1 downto 0);
    trunc_ln69_fu_382_p1 <= sr_0_ptr_write_fu_324_p3(10 - 1 downto 0);
    val_EOP_fu_303_p1 <= (0=>din_8_dout, others=>'-');
    val_skip_fu_299_p1 <= (0=>din_6_dout, others=>'-');
    xor_ln69_fu_427_p2 <= (i_assign_reg_261 xor ap_const_lv32_FFFFFFFF);
    xor_ln70_1_fu_541_p2 <= (tmp_62_fu_533_p3 xor ap_const_lv1_1);
    xor_ln70_2_fu_613_p2 <= (tmp_63_fu_605_p3 xor ap_const_lv1_1);
    xor_ln70_fu_469_p2 <= (tmp_61_fu_461_p3 xor ap_const_lv1_1);
    zext_ln71_1_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_1_fu_559_p3),64));
    zext_ln71_2_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_2_fu_631_p3),64));
    zext_ln71_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln70_fu_487_p3),64));
end behav;
