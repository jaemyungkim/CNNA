-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_sc_stream_resize_equal_inst_1_thread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    din_0_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    din_0_empty_n : IN STD_LOGIC;
    din_0_read : OUT STD_LOGIC;
    din_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    din_1_empty_n : IN STD_LOGIC;
    din_1_read : OUT STD_LOGIC;
    din_2_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    din_2_empty_n : IN STD_LOGIC;
    din_2_read : OUT STD_LOGIC;
    dout_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    dout_0_full_n : IN STD_LOGIC;
    dout_0_write : OUT STD_LOGIC;
    dout_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_1_full_n : IN STD_LOGIC;
    dout_1_write : OUT STD_LOGIC;
    dout_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_2_full_n : IN STD_LOGIC;
    dout_2_write : OUT STD_LOGIC );
end;


architecture behav of p_sc_stream_resize_equal_inst_1_thread is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal din_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal din_1_blk_n : STD_LOGIC;
    signal din_2_blk_n : STD_LOGIC;
    signal dout_0_blk_n : STD_LOGIC;
    signal dout_1_blk_n : STD_LOGIC;
    signal dout_2_blk_n : STD_LOGIC;
    signal io_acc_block_signal_op28 : STD_LOGIC;
    signal io_acc_block_signal_op32 : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal val_tlast_V_fu_94_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, val_tlast_V_fu_94_p1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (val_tlast_V_fu_94_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (val_tlast_V_fu_94_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_assign_proc : process(io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
                ap_block_state3 <= ((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0));
    end process;


    din_0_blk_n_assign_proc : process(din_0_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_0_blk_n <= din_0_empty_n;
        else 
            din_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_0_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
        if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            din_0_read <= ap_const_logic_1;
        else 
            din_0_read <= ap_const_logic_0;
        end if; 
    end process;


    din_1_blk_n_assign_proc : process(din_1_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_1_blk_n <= din_1_empty_n;
        else 
            din_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_1_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
        if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            din_1_read <= ap_const_logic_1;
        else 
            din_1_read <= ap_const_logic_0;
        end if; 
    end process;


    din_2_blk_n_assign_proc : process(din_2_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_2_blk_n <= din_2_empty_n;
        else 
            din_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_2_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
        if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            din_2_read <= ap_const_logic_1;
        else 
            din_2_read <= ap_const_logic_0;
        end if; 
    end process;


    dout_0_blk_n_assign_proc : process(dout_0_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_0_blk_n <= dout_0_full_n;
        else 
            dout_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_0_din <= din_0_dout;

    dout_0_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
        if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_0_write <= ap_const_logic_1;
        else 
            dout_0_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_1_blk_n_assign_proc : process(dout_1_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_1_blk_n <= dout_1_full_n;
        else 
            dout_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_1_din <= din_1_dout;

    dout_1_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
        if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_1_write <= ap_const_logic_1;
        else 
            dout_1_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_2_blk_n_assign_proc : process(dout_2_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_2_blk_n <= dout_2_full_n;
        else 
            dout_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_2_din <= din_2_dout;

    dout_2_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32)
    begin
        if ((not(((io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_2_write <= ap_const_logic_1;
        else 
            dout_2_write <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op28 <= (din_2_empty_n and din_1_empty_n and din_0_empty_n);
    io_acc_block_signal_op32 <= (dout_2_full_n and dout_1_full_n and dout_0_full_n);
    val_tlast_V_fu_94_p1 <= din_1_dout;
end behav;
