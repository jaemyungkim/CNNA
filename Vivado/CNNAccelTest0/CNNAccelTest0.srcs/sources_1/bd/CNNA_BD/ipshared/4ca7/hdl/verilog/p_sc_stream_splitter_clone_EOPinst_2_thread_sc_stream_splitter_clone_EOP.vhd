-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_sc_stream_splitter_clone_EOPinst_2_thread_sc_stream_splitter_clone_EOP is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    din_0_dout : IN STD_LOGIC_VECTOR (383 downto 0);
    din_0_empty_n : IN STD_LOGIC;
    din_0_read : OUT STD_LOGIC;
    din_1_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    din_1_empty_n : IN STD_LOGIC;
    din_1_read : OUT STD_LOGIC;
    din_2_dout : IN STD_LOGIC_VECTOR (47 downto 0);
    din_2_empty_n : IN STD_LOGIC;
    din_2_read : OUT STD_LOGIC;
    dout_0_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_0_full_n : IN STD_LOGIC;
    dout_0_write : OUT STD_LOGIC;
    dout_1_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_1_full_n : IN STD_LOGIC;
    dout_1_write : OUT STD_LOGIC;
    dout_2_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_2_full_n : IN STD_LOGIC;
    dout_2_write : OUT STD_LOGIC;
    dout_3_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_3_full_n : IN STD_LOGIC;
    dout_3_write : OUT STD_LOGIC;
    dout_4_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_4_full_n : IN STD_LOGIC;
    dout_4_write : OUT STD_LOGIC;
    dout_5_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_5_full_n : IN STD_LOGIC;
    dout_5_write : OUT STD_LOGIC;
    dout_6_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_6_full_n : IN STD_LOGIC;
    dout_6_write : OUT STD_LOGIC;
    dout_7_din : OUT STD_LOGIC_VECTOR (383 downto 0);
    dout_7_full_n : IN STD_LOGIC;
    dout_7_write : OUT STD_LOGIC;
    dout_8_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_8_full_n : IN STD_LOGIC;
    dout_8_write : OUT STD_LOGIC;
    dout_9_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_9_full_n : IN STD_LOGIC;
    dout_9_write : OUT STD_LOGIC;
    dout_10_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_10_full_n : IN STD_LOGIC;
    dout_10_write : OUT STD_LOGIC;
    dout_11_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_11_full_n : IN STD_LOGIC;
    dout_11_write : OUT STD_LOGIC;
    dout_12_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_12_full_n : IN STD_LOGIC;
    dout_12_write : OUT STD_LOGIC;
    dout_13_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_13_full_n : IN STD_LOGIC;
    dout_13_write : OUT STD_LOGIC;
    dout_14_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_14_full_n : IN STD_LOGIC;
    dout_14_write : OUT STD_LOGIC;
    dout_15_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_15_full_n : IN STD_LOGIC;
    dout_15_write : OUT STD_LOGIC;
    dout_16_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_16_full_n : IN STD_LOGIC;
    dout_16_write : OUT STD_LOGIC;
    dout_17_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_17_full_n : IN STD_LOGIC;
    dout_17_write : OUT STD_LOGIC;
    dout_18_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_18_full_n : IN STD_LOGIC;
    dout_18_write : OUT STD_LOGIC;
    dout_19_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_19_full_n : IN STD_LOGIC;
    dout_19_write : OUT STD_LOGIC;
    dout_20_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_20_full_n : IN STD_LOGIC;
    dout_20_write : OUT STD_LOGIC;
    dout_21_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_21_full_n : IN STD_LOGIC;
    dout_21_write : OUT STD_LOGIC;
    dout_22_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_22_full_n : IN STD_LOGIC;
    dout_22_write : OUT STD_LOGIC;
    dout_23_din : OUT STD_LOGIC_VECTOR (47 downto 0);
    dout_23_full_n : IN STD_LOGIC;
    dout_23_write : OUT STD_LOGIC );
end;


architecture behav of p_sc_stream_splitter_clone_EOPinst_2_thread_sc_stream_splitter_clone_EOP is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal din_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal din_1_blk_n : STD_LOGIC;
    signal din_2_blk_n : STD_LOGIC;
    signal dout_0_blk_n : STD_LOGIC;
    signal dout_1_blk_n : STD_LOGIC;
    signal dout_2_blk_n : STD_LOGIC;
    signal dout_3_blk_n : STD_LOGIC;
    signal dout_4_blk_n : STD_LOGIC;
    signal dout_5_blk_n : STD_LOGIC;
    signal dout_6_blk_n : STD_LOGIC;
    signal dout_7_blk_n : STD_LOGIC;
    signal dout_8_blk_n : STD_LOGIC;
    signal dout_9_blk_n : STD_LOGIC;
    signal dout_10_blk_n : STD_LOGIC;
    signal dout_11_blk_n : STD_LOGIC;
    signal dout_12_blk_n : STD_LOGIC;
    signal dout_13_blk_n : STD_LOGIC;
    signal dout_14_blk_n : STD_LOGIC;
    signal dout_15_blk_n : STD_LOGIC;
    signal dout_16_blk_n : STD_LOGIC;
    signal dout_17_blk_n : STD_LOGIC;
    signal dout_18_blk_n : STD_LOGIC;
    signal dout_19_blk_n : STD_LOGIC;
    signal dout_20_blk_n : STD_LOGIC;
    signal dout_21_blk_n : STD_LOGIC;
    signal dout_22_blk_n : STD_LOGIC;
    signal dout_23_blk_n : STD_LOGIC;
    signal io_acc_block_signal_op28 : STD_LOGIC;
    signal io_acc_block_signal_op32 : STD_LOGIC;
    signal io_acc_block_signal_op33 : STD_LOGIC;
    signal io_acc_block_signal_op34 : STD_LOGIC;
    signal io_acc_block_signal_op35 : STD_LOGIC;
    signal io_acc_block_signal_op36 : STD_LOGIC;
    signal io_acc_block_signal_op37 : STD_LOGIC;
    signal io_acc_block_signal_op38 : STD_LOGIC;
    signal io_acc_block_signal_op39 : STD_LOGIC;
    signal ap_block_state3 : BOOLEAN;
    signal val_tlast_V_fu_238_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln140_fu_262_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39, val_tlast_V_fu_238_p1, trunc_ln140_fu_262_p1, tmp_4_fu_266_p3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3) and ((val_tlast_V_fu_238_p1 = ap_const_lv1_0) or ((tmp_4_fu_266_p3 = ap_const_lv1_1) or (trunc_ln140_fu_262_p1 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (tmp_4_fu_266_p3 = ap_const_lv1_0) and (trunc_ln140_fu_262_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (val_tlast_V_fu_238_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state3_assign_proc : process(io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
                ap_block_state3 <= ((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0));
    end process;


    din_0_blk_n_assign_proc : process(din_0_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_0_blk_n <= din_0_empty_n;
        else 
            din_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_0_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            din_0_read <= ap_const_logic_1;
        else 
            din_0_read <= ap_const_logic_0;
        end if; 
    end process;


    din_1_blk_n_assign_proc : process(din_1_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_1_blk_n <= din_1_empty_n;
        else 
            din_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_1_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            din_1_read <= ap_const_logic_1;
        else 
            din_1_read <= ap_const_logic_0;
        end if; 
    end process;


    din_2_blk_n_assign_proc : process(din_2_empty_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            din_2_blk_n <= din_2_empty_n;
        else 
            din_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_2_read_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            din_2_read <= ap_const_logic_1;
        else 
            din_2_read <= ap_const_logic_0;
        end if; 
    end process;


    dout_0_blk_n_assign_proc : process(dout_0_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_0_blk_n <= dout_0_full_n;
        else 
            dout_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_0_din <= din_0_dout;

    dout_0_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_0_write <= ap_const_logic_1;
        else 
            dout_0_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_10_blk_n_assign_proc : process(dout_10_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_10_blk_n <= dout_10_full_n;
        else 
            dout_10_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_10_din <= din_1_dout;

    dout_10_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_10_write <= ap_const_logic_1;
        else 
            dout_10_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_11_blk_n_assign_proc : process(dout_11_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_11_blk_n <= dout_11_full_n;
        else 
            dout_11_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_11_din <= din_1_dout;

    dout_11_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_11_write <= ap_const_logic_1;
        else 
            dout_11_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_12_blk_n_assign_proc : process(dout_12_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_12_blk_n <= dout_12_full_n;
        else 
            dout_12_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_12_din <= din_1_dout;

    dout_12_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_12_write <= ap_const_logic_1;
        else 
            dout_12_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_13_blk_n_assign_proc : process(dout_13_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_13_blk_n <= dout_13_full_n;
        else 
            dout_13_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_13_din <= din_1_dout;

    dout_13_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_13_write <= ap_const_logic_1;
        else 
            dout_13_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_14_blk_n_assign_proc : process(dout_14_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_14_blk_n <= dout_14_full_n;
        else 
            dout_14_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_14_din <= din_1_dout;

    dout_14_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_14_write <= ap_const_logic_1;
        else 
            dout_14_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_15_blk_n_assign_proc : process(dout_15_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_15_blk_n <= dout_15_full_n;
        else 
            dout_15_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_15_din <= din_1_dout;

    dout_15_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_15_write <= ap_const_logic_1;
        else 
            dout_15_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_16_blk_n_assign_proc : process(dout_16_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_16_blk_n <= dout_16_full_n;
        else 
            dout_16_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_16_din <= din_2_dout;

    dout_16_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_16_write <= ap_const_logic_1;
        else 
            dout_16_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_17_blk_n_assign_proc : process(dout_17_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_17_blk_n <= dout_17_full_n;
        else 
            dout_17_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_17_din <= din_2_dout;

    dout_17_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_17_write <= ap_const_logic_1;
        else 
            dout_17_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_18_blk_n_assign_proc : process(dout_18_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_18_blk_n <= dout_18_full_n;
        else 
            dout_18_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_18_din <= din_2_dout;

    dout_18_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_18_write <= ap_const_logic_1;
        else 
            dout_18_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_19_blk_n_assign_proc : process(dout_19_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_19_blk_n <= dout_19_full_n;
        else 
            dout_19_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_19_din <= din_2_dout;

    dout_19_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_19_write <= ap_const_logic_1;
        else 
            dout_19_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_1_blk_n_assign_proc : process(dout_1_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_1_blk_n <= dout_1_full_n;
        else 
            dout_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_1_din <= din_0_dout;

    dout_1_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_1_write <= ap_const_logic_1;
        else 
            dout_1_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_20_blk_n_assign_proc : process(dout_20_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_20_blk_n <= dout_20_full_n;
        else 
            dout_20_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_20_din <= din_2_dout;

    dout_20_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_20_write <= ap_const_logic_1;
        else 
            dout_20_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_21_blk_n_assign_proc : process(dout_21_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_21_blk_n <= dout_21_full_n;
        else 
            dout_21_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_21_din <= din_2_dout;

    dout_21_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_21_write <= ap_const_logic_1;
        else 
            dout_21_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_22_blk_n_assign_proc : process(dout_22_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_22_blk_n <= dout_22_full_n;
        else 
            dout_22_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_22_din <= din_2_dout;

    dout_22_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_22_write <= ap_const_logic_1;
        else 
            dout_22_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_23_blk_n_assign_proc : process(dout_23_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_23_blk_n <= dout_23_full_n;
        else 
            dout_23_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_23_din <= din_2_dout;

    dout_23_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_23_write <= ap_const_logic_1;
        else 
            dout_23_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_2_blk_n_assign_proc : process(dout_2_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_2_blk_n <= dout_2_full_n;
        else 
            dout_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_2_din <= din_0_dout;

    dout_2_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_2_write <= ap_const_logic_1;
        else 
            dout_2_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_3_blk_n_assign_proc : process(dout_3_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_3_blk_n <= dout_3_full_n;
        else 
            dout_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_3_din <= din_0_dout;

    dout_3_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_3_write <= ap_const_logic_1;
        else 
            dout_3_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_4_blk_n_assign_proc : process(dout_4_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_4_blk_n <= dout_4_full_n;
        else 
            dout_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_4_din <= din_0_dout;

    dout_4_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_4_write <= ap_const_logic_1;
        else 
            dout_4_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_5_blk_n_assign_proc : process(dout_5_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_5_blk_n <= dout_5_full_n;
        else 
            dout_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_5_din <= din_0_dout;

    dout_5_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_5_write <= ap_const_logic_1;
        else 
            dout_5_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_6_blk_n_assign_proc : process(dout_6_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_6_blk_n <= dout_6_full_n;
        else 
            dout_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_6_din <= din_0_dout;

    dout_6_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_6_write <= ap_const_logic_1;
        else 
            dout_6_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_7_blk_n_assign_proc : process(dout_7_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_7_blk_n <= dout_7_full_n;
        else 
            dout_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_7_din <= din_0_dout;

    dout_7_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_7_write <= ap_const_logic_1;
        else 
            dout_7_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_8_blk_n_assign_proc : process(dout_8_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_8_blk_n <= dout_8_full_n;
        else 
            dout_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_8_din <= din_1_dout;

    dout_8_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_8_write <= ap_const_logic_1;
        else 
            dout_8_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_9_blk_n_assign_proc : process(dout_9_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dout_9_blk_n <= dout_9_full_n;
        else 
            dout_9_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_9_din <= din_1_dout;

    dout_9_write_assign_proc : process(ap_CS_fsm_state3, io_acc_block_signal_op28, io_acc_block_signal_op32, io_acc_block_signal_op33, io_acc_block_signal_op34, io_acc_block_signal_op35, io_acc_block_signal_op36, io_acc_block_signal_op37, io_acc_block_signal_op38, io_acc_block_signal_op39)
    begin
        if ((not(((io_acc_block_signal_op39 = ap_const_logic_0) or (io_acc_block_signal_op38 = ap_const_logic_0) or (io_acc_block_signal_op37 = ap_const_logic_0) or (io_acc_block_signal_op36 = ap_const_logic_0) or (io_acc_block_signal_op35 = ap_const_logic_0) or (io_acc_block_signal_op34 = ap_const_logic_0) or (io_acc_block_signal_op33 = ap_const_logic_0) or (io_acc_block_signal_op32 = ap_const_logic_0) or (io_acc_block_signal_op28 = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            dout_9_write <= ap_const_logic_1;
        else 
            dout_9_write <= ap_const_logic_0;
        end if; 
    end process;

    io_acc_block_signal_op28 <= (din_2_empty_n and din_1_empty_n and din_0_empty_n);
    io_acc_block_signal_op32 <= (dout_8_full_n and dout_16_full_n and dout_0_full_n);
    io_acc_block_signal_op33 <= (dout_9_full_n and dout_1_full_n and dout_17_full_n);
    io_acc_block_signal_op34 <= (dout_2_full_n and dout_18_full_n and dout_10_full_n);
    io_acc_block_signal_op35 <= (dout_3_full_n and dout_19_full_n and dout_11_full_n);
    io_acc_block_signal_op36 <= (dout_4_full_n and dout_20_full_n and dout_12_full_n);
    io_acc_block_signal_op37 <= (dout_5_full_n and dout_21_full_n and dout_13_full_n);
    io_acc_block_signal_op38 <= (dout_6_full_n and dout_22_full_n and dout_14_full_n);
    io_acc_block_signal_op39 <= (dout_7_full_n and dout_23_full_n and dout_15_full_n);
    tmp_4_fu_266_p3 <= din_2_dout(47 downto 47);
    trunc_ln140_fu_262_p1 <= din_2_dout(1 - 1 downto 0);
    val_tlast_V_fu_238_p1 <= din_1_dout;
end behav;
