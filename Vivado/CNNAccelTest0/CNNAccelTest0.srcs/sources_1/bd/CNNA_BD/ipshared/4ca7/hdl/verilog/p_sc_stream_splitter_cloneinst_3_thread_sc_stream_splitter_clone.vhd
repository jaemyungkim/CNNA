-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_sc_stream_splitter_cloneinst_3_thread_sc_stream_splitter_clone is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    din_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    din_empty_n : IN STD_LOGIC;
    din_read : OUT STD_LOGIC;
    dout_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_0_full_n : IN STD_LOGIC;
    dout_0_write : OUT STD_LOGIC;
    dout_1_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_1_full_n : IN STD_LOGIC;
    dout_1_write : OUT STD_LOGIC;
    dout_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_2_full_n : IN STD_LOGIC;
    dout_2_write : OUT STD_LOGIC;
    dout_3_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_3_full_n : IN STD_LOGIC;
    dout_3_write : OUT STD_LOGIC;
    dout_4_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_4_full_n : IN STD_LOGIC;
    dout_4_write : OUT STD_LOGIC;
    dout_5_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_5_full_n : IN STD_LOGIC;
    dout_5_write : OUT STD_LOGIC;
    dout_6_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_6_full_n : IN STD_LOGIC;
    dout_6_write : OUT STD_LOGIC;
    dout_7_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_7_full_n : IN STD_LOGIC;
    dout_7_write : OUT STD_LOGIC );
end;


architecture behav of p_sc_stream_splitter_cloneinst_3_thread_sc_stream_splitter_clone is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal din_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "10";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal dout_0_blk_n : STD_LOGIC;
    signal dout_1_blk_n : STD_LOGIC;
    signal dout_2_blk_n : STD_LOGIC;
    signal dout_3_blk_n : STD_LOGIC;
    signal dout_4_blk_n : STD_LOGIC;
    signal dout_5_blk_n : STD_LOGIC;
    signal dout_6_blk_n : STD_LOGIC;
    signal dout_7_blk_n : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state2;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_block_state2_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n)
    begin
                ap_block_state2 <= ((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0));
    end process;


    din_blk_n_assign_proc : process(din_empty_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            din_blk_n <= din_empty_n;
        else 
            din_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    din_read_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            din_read <= ap_const_logic_1;
        else 
            din_read <= ap_const_logic_0;
        end if; 
    end process;


    dout_0_blk_n_assign_proc : process(dout_0_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_0_blk_n <= dout_0_full_n;
        else 
            dout_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_0_din <= din_dout;

    dout_0_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_0_write <= ap_const_logic_1;
        else 
            dout_0_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_1_blk_n_assign_proc : process(dout_1_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_1_blk_n <= dout_1_full_n;
        else 
            dout_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_1_din <= din_dout;

    dout_1_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_1_write <= ap_const_logic_1;
        else 
            dout_1_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_2_blk_n_assign_proc : process(dout_2_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_2_blk_n <= dout_2_full_n;
        else 
            dout_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_2_din <= din_dout;

    dout_2_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_2_write <= ap_const_logic_1;
        else 
            dout_2_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_3_blk_n_assign_proc : process(dout_3_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_3_blk_n <= dout_3_full_n;
        else 
            dout_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_3_din <= din_dout;

    dout_3_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_3_write <= ap_const_logic_1;
        else 
            dout_3_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_4_blk_n_assign_proc : process(dout_4_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_4_blk_n <= dout_4_full_n;
        else 
            dout_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_4_din <= din_dout;

    dout_4_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_4_write <= ap_const_logic_1;
        else 
            dout_4_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_5_blk_n_assign_proc : process(dout_5_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_5_blk_n <= dout_5_full_n;
        else 
            dout_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_5_din <= din_dout;

    dout_5_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_5_write <= ap_const_logic_1;
        else 
            dout_5_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_6_blk_n_assign_proc : process(dout_6_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_6_blk_n <= dout_6_full_n;
        else 
            dout_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_6_din <= din_dout;

    dout_6_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_6_write <= ap_const_logic_1;
        else 
            dout_6_write <= ap_const_logic_0;
        end if; 
    end process;


    dout_7_blk_n_assign_proc : process(dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dout_7_blk_n <= dout_7_full_n;
        else 
            dout_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dout_7_din <= din_dout;

    dout_7_write_assign_proc : process(din_empty_n, dout_0_full_n, dout_1_full_n, dout_2_full_n, dout_3_full_n, dout_4_full_n, dout_5_full_n, dout_6_full_n, dout_7_full_n, ap_CS_fsm_state2)
    begin
        if ((not(((din_empty_n = ap_const_logic_0) or (dout_7_full_n = ap_const_logic_0) or (dout_6_full_n = ap_const_logic_0) or (dout_5_full_n = ap_const_logic_0) or (dout_4_full_n = ap_const_logic_0) or (dout_3_full_n = ap_const_logic_0) or (dout_2_full_n = ap_const_logic_0) or (dout_1_full_n = ap_const_logic_0) or (dout_0_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dout_7_write <= ap_const_logic_1;
        else 
            dout_7_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
