-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity p_sc_stream_pixel_2_stream is
port (
    clk : IN STD_LOGIC;
    reset : IN STD_LOGIC;
    din_red_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    din_red_empty_n : IN STD_LOGIC;
    din_red_read : OUT STD_LOGIC;
    din_green_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    din_green_empty_n : IN STD_LOGIC;
    din_green_read : OUT STD_LOGIC;
    din_blue_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    din_blue_empty_n : IN STD_LOGIC;
    din_blue_read : OUT STD_LOGIC;
    din_last_dout : IN STD_LOGIC;
    din_last_empty_n : IN STD_LOGIC;
    din_last_read : OUT STD_LOGIC;
    dout_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    dout_0_full_n : IN STD_LOGIC;
    dout_0_write : OUT STD_LOGIC;
    dout_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    dout_1_full_n : IN STD_LOGIC;
    dout_1_write : OUT STD_LOGIC;
    dout_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
    dout_2_full_n : IN STD_LOGIC;
    dout_2_write : OUT STD_LOGIC );
end;


architecture behav of p_sc_stream_pixel_2_stream is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "p_sc_stream_pixel_2_stream,hls_ip_2019_1,{HLS_INPUT_TYPE=sc,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.013750,HLS_SYN_LAT=3,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=66,HLS_SYN_LUT=398,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_red_read : STD_LOGIC;
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_green_read : STD_LOGIC;
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_blue_read : STD_LOGIC;
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_last_read : STD_LOGIC;
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_0_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_0_write : STD_LOGIC;
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_1_din : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_1_write : STD_LOGIC;
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_2_din : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_2_write : STD_LOGIC;

    component p_sc_stream_pixel_2_stream_thread IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        din_red_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        din_red_empty_n : IN STD_LOGIC;
        din_red_read : OUT STD_LOGIC;
        din_green_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        din_green_empty_n : IN STD_LOGIC;
        din_green_read : OUT STD_LOGIC;
        din_blue_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        din_blue_empty_n : IN STD_LOGIC;
        din_blue_read : OUT STD_LOGIC;
        din_last_dout : IN STD_LOGIC;
        din_last_empty_n : IN STD_LOGIC;
        din_last_read : OUT STD_LOGIC;
        dout_0_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        dout_0_full_n : IN STD_LOGIC;
        dout_0_write : OUT STD_LOGIC;
        dout_1_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        dout_1_full_n : IN STD_LOGIC;
        dout_1_write : OUT STD_LOGIC;
        dout_2_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        dout_2_full_n : IN STD_LOGIC;
        dout_2_write : OUT STD_LOGIC );
    end component;



begin
    grp_p_sc_stream_pixel_2_stream_thread_fu_74 : component p_sc_stream_pixel_2_stream_thread
    port map (
        ap_clk => clk,
        ap_rst => reset,
        din_red_dout => din_red_dout,
        din_red_empty_n => din_red_empty_n,
        din_red_read => grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_red_read,
        din_green_dout => din_green_dout,
        din_green_empty_n => din_green_empty_n,
        din_green_read => grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_green_read,
        din_blue_dout => din_blue_dout,
        din_blue_empty_n => din_blue_empty_n,
        din_blue_read => grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_blue_read,
        din_last_dout => din_last_dout,
        din_last_empty_n => din_last_empty_n,
        din_last_read => grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_last_read,
        dout_0_din => grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_0_din,
        dout_0_full_n => dout_0_full_n,
        dout_0_write => grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_0_write,
        dout_1_din => grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_1_din,
        dout_1_full_n => dout_1_full_n,
        dout_1_write => grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_1_write,
        dout_2_din => grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_2_din,
        dout_2_full_n => dout_2_full_n,
        dout_2_write => grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_2_write);




    din_blue_read <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_blue_read;
    din_green_read <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_green_read;
    din_last_read <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_last_read;
    din_red_read <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_din_red_read;
    dout_0_din <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_0_din;
    dout_0_write <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_0_write;
    dout_1_din <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_1_din;
    dout_1_write <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_1_write;
    dout_2_din <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_2_din;
    dout_2_write <= grp_p_sc_stream_pixel_2_stream_thread_fu_74_dout_2_write;
end behav;
